{"version":3,"sources":["components/BirdCard/BirdCard.js","components/Grid/Grid.js","components/Nav/Nav.js","App.js","serviceWorker.js","index.js"],"names":["BirdCard","props","react_default","a","createElement","className","concat","finish","id","onClick","handleCardClick","src","image","alt","Grid","shake","children","Nav","style","color","gameStatus","href","score","highScore","App","state","birds","bSecondClick","update","Object","toConsumableArray","_this","forEach","bird","clicked","length","sort","Math","random","setState","_this2","this","components_Nav_Nav","components_Grid_Grid","map","components_BirdCard_BirdCard","key","bFinished","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33e684b3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./BirdCard.css\";\r\n\r\nconst BirdCard = props => (\r\n   <div className = {`card ${props.finish ? \" finish\":\"\"}`} id = {props.id} onClick = {props.handleCardClick}>\r\n   <img className = \"card-img\" src = {props.image} alt = \"birds\"/>\r\n   </div>\r\n);\r\n\r\nexport default BirdCard;","import React from \"react\";\r\nimport \"./Grid.css\";\r\n\r\nconst Grid = props => (\r\n  <div className = {`container ${props.shake ? \"shake\":\"\"}`}>\r\n    {props.children}\r\n  </div>\r\n);\r\n\r\nexport default Grid;","import React from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nconst Nav = props => (\r\n  <nav className=\"navbar navbar-dark bg-dark\">\r\n    <h2 style={{color:\"white\"}}>Clicky Game</h2>\r\n\r\n    <span className=\"navbar-text\">{props.gameStatus}</span>\r\n    <ul className=\"nav text-white nav-fills\">\r\n      <li className=\"nav-item\">\r\n        <span className=\"nav-link\" href=\"#!\">Score {props.score} &nbsp;&nbsp;&nbsp;&nbsp; Top Score {props.highScore}</span>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n)\r\n\r\nexport default Nav;","import React, { Component } from 'react';\nimport './App.css';\nimport BirdCard from \"./components/BirdCard\";\nimport Grid from \"./components/Grid\";\nimport Nav from \"./components/Nav\";\n//import Wrapper from \"./components/Wrapper\";\nimport birds from \"./birds.json\";\n\n\nclass App extends Component {\n  // Setting this.state.birds to the birds json array\n  state = {\n    birds,\n    score: 0,\n    highScore: 0,\n    gameStatus: \"Click all images ONLY ONCE to win!!\"\n  }\n\n  handleCardClick = id => {\n    let bSecondClick = false;\n\n    let update = {\n      birds: [ ...this.state.birds ],\n      score: this.state.score,\n      highScore: this.state.highScore,\n      gameStatus: this.state.gameStatus\n    }\n\n    update.birds.forEach( bird => {\n      if ( bird.id === id ) {\n        if ( bird.clicked ) {\n          bSecondClick = true;\n        } else {\n          bird.clicked = true;\n          update.score++;\n          if ( update.score > update.highScore ) {\n            update.highScore = update.score;\n          }\n        }\n      }\n    })\n\n    if ( bSecondClick ) {\n      update.birds.forEach( bird => bird.clicked = false );\n      update.gameStatus = \"Dho!!  You already clicked on THAT one!!  Your score was:   \" + update.score;\n      update.score = 0;\n    } else if ( update.score && !( update.score % update.birds.length )) {\n      // Perfect score!  Starting over!!\n      update.gameStatus = \"Congratulations!!  Perfect Score!!\";\n      update.birds.forEach( bird => bird.clicked = false );\n      update.score = 0;\n    } else {\n      // Sailing smoothly through.. Set the message to \"encourage\"!!!\n      update.gameStatus = \"Click all images ONLY ONCE to win!!\";\n    }\n\n    update.birds = update.birds.sort(() => 0.5 - Math.random());\n\n    this.setState({ birds: update.birds, score: update.score, highScore: update.highScore, gameStatus: update.gameStatus });\n  }\n\n  // Map over this.state.birds and render a BirdCard component for each bird object\n  render() {\n  \n    return (\n      <div>\n        <Nav score={this.state.score} highScore={this.state.highScore} gameStatus={this.state.gameStatus}/>\n        <Grid shake={!this.state.score && this.state.highScore}>\n          {this.state.birds.map( bird => (\n            <BirdCard\n              id={bird.id}\n              key={bird.id}\n              image={bird.image}\n              bFinished={this.state.score && !(this.state.score % this.state.birds.length )}\n              handleCardClick={()=>this.handleCardClick( bird.id )}\n            />\n          ))}\n        </Grid>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}